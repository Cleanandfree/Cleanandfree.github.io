<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JSP内置对象request response out</title>
    <link href="undefined2019/11/08/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E4%B9%8Brequest%20response%20out/"/>
    <url>2019/11/08/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E4%B9%8Brequest%20response%20out/</url>
    
    <content type="html"><![CDATA[<h2 id="JSP内置对象之request-response-out"><a href="#JSP内置对象之request-response-out" class="headerlink" title="JSP内置对象之request response out"></a>JSP内置对象之request response out</h2><h3 id="一、out对象："><a href="#一、out对象：" class="headerlink" title="一、out对象："></a>一、out对象：</h3><p>out对象是<strong>JspWriter</strong>类的实例，是向客户端输出内容常用的对象。<br>常用方法如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> 向客户端打印字符串</span></span><br><span class="line"><span class="function">2.<span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>  清除缓冲区的内容，如果在<span class="title">flush</span><span class="params">()</span>之后调用会抛出异常</span></span><br><span class="line"><span class="function">3.<span class="keyword">void</span> <span class="title">clearBuffer</span><span class="params">()</span> 清除缓冲区的内容，如果在<span class="title">flush</span><span class="params">()</span>之后调用不会抛出异常</span></span><br><span class="line"><span class="function">4.<span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span>  将缓冲区内容输出到客户端</span></span><br><span class="line"><span class="function">5.<span class="keyword">int</span> <span class="title">getBufferSize</span><span class="params">()</span>  返回缓冲区字节数的大小，如不设缓冲区则为0</span></span><br><span class="line"><span class="function">6.<span class="keyword">int</span> <span class="title">getRemaining</span><span class="params">()</span>  返回缓冲区还剩余多少可用</span></span><br><span class="line"><span class="function">7.<span class="keyword">boolean</span> <span class="title">isAutoFlush</span><span class="params">()</span>  返回缓冲区满时，是自动清空还是抛出异常</span></span><br><span class="line"><span class="function">8.<span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>  关闭输出流</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    out.println(<span class="string">"&lt;h2&gt;静夜思&lt;/h2&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"床前明月光 &lt;br&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"疑似地上霜 &lt;br&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"举头望明月 &lt;br&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"低头思故乡 &lt;br&gt;"</span>);</span><br><span class="line">   %&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    缓冲区大小：&lt;%=out.getBufferSize() %&gt;<span class="keyword">byte</span>&lt;br&gt;</span><br><span class="line">    缓冲区剩余大小：&lt;%=out.getRemaining() %&gt;<span class="keyword">byte</span>&lt;br&gt;</span><br><span class="line">    是否自动清除缓冲区：&lt;%=out.isAutoFlush() %&gt;&lt;br&gt;</span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="二、request对象"><a href="#二、request对象" class="headerlink" title="二、request对象"></a>二、request对象</h3><p>客户端的请求信息被封装在request对象中，通过他才能了解到客户的需求，然后做出响应。他是<strong>HttpServletRequest</strong>的实例。request对象具有请求域，即完成客户端的请求之前，该对象一直有效。常用方法如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span> 返回name指定参数的参数值</span></span><br><span class="line"><span class="function">String[] <span class="title">getParameterValues</span><span class="params">(String name)</span> 返回包含参数name的所有值的数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String,Object)</span> 存储此请求中的属性</span></span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span> 返回指定属性的属性值</span></span><br><span class="line"><span class="function">String <span class="title">getContentType</span><span class="params">()</span> 得到请求体的MIME类型</span></span><br><span class="line"><span class="function">String <span class="title">getProtocol</span><span class="params">()</span> 返回请求用的协议类型及版本号</span></span><br><span class="line"><span class="function">String <span class="title">getServerName</span><span class="params">()</span> 返回接受请求的服务器主机名</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getServerPort</span><span class="params">()</span> 返回服务器接受该请求所用的端口号</span></span><br><span class="line"><span class="function">String <span class="title">getCharacterEncoding</span><span class="params">()</span> 返回字符编码方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">()</span> 设置请求的字符编码方式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCotentLenth</span><span class="params">()</span> 返回请求体的长度（字节数）</span></span><br><span class="line"><span class="function">String <span class="title">getRemoteAddr</span><span class="params">()</span> 返回发送此请求的客户端IP地址</span></span><br><span class="line"><span class="function">String <span class="title">getRealPath</span><span class="params">(String path)</span> 返回一虚拟路径的真实路径</span></span><br><span class="line"><span class="function">String <span class="title">getContextPath</span><span class="params">()</span> 返回上下文路径</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">login.jsp：</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;用户注册&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;form action=<span class="string">"request.jsp"</span> name=<span class="string">"regForm"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;用户名：&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="text" name="username"/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;爱好：&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"favorite"</span> value=<span class="string">"read"</span>&gt;读书</span><br><span class="line">                    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"favorite"</span> value=<span class="string">"music"</span>&gt;音乐</span><br><span class="line">                    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"favorite"</span> value=<span class="string">"movie"</span>&gt;电影</span><br><span class="line">                    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"favorite"</span> value=<span class="string">"internet"</span>&gt;排球</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan="2"&gt;&lt;input type="submit" value="提交"/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;a href=<span class="string">"request.jsp?username="</span>张三<span class="string">"&gt;测试URL传参数&lt;/a&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">request.jsp:</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;request内置对象&lt;/h1&gt;</span><br><span class="line">    &lt;%request.setCharacterEncoding(<span class="string">"utf-8"</span>); %&gt; &lt;%--解决中文乱码问题，无法解决url传递中文的乱码问题 --%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">"password"</span> , <span class="string">"123456"</span>);</span><br><span class="line">     %&gt;</span><br><span class="line">    用户名：&lt;%=request.getParameter(<span class="string">"username"</span>) %&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">if</span>(request.getParameterValues(<span class="string">"favorite"</span>)!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            String[] favorites=request.getParameterValues(<span class="string">"favorite"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;favorites.length;i++)&#123;</span><br><span class="line">                out.write(favorites[i]+<span class="string">"&amp;nbsp;&amp;nbsp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;%=request.getAttribute(<span class="string">"password"</span>) %&gt;&lt;br&gt;</span><br><span class="line">    请求体的MIME类型：&lt;%=request.getContentType() %&gt;&lt;br&gt;</span><br><span class="line">    协议类型及版本号：&lt;%=request.getProtocol() %&gt;&lt;br&gt;</span><br><span class="line">    服务器主机名：&lt;%=request.getServerName() %&gt;&lt;br&gt;</span><br><span class="line">    服务器端口名：&lt;%=request.getServerPort() %&gt;&lt;br&gt;</span><br><span class="line">    请求文件长度：&lt;%=request.getContentLength() %&gt;&lt;br&gt;</span><br><span class="line">    请求客户端的IP地址：&lt;%=request.getRemoteAddr() %&gt;&lt;br&gt;</span><br><span class="line">    请求的真实路径：&lt;%=request.getRealPath(<span class="string">"request.jsp"</span>) %&gt;&lt;br&gt;</span><br><span class="line">    请求的上下文路径：&lt;%=request.getContextPath() %&gt;&lt;br&gt;</span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="三、response对象"><a href="#三、response对象" class="headerlink" title="三、response对象"></a>三、response对象</h3><p>response对象包含了相应客户请求的有关信息，但在jsp中很少直接使用到它。它是<strong>HttpServerResponse</strong>类的实例。response对象具有页面作用域，即访问一个页面时，该页面内的response对象只能对这次访问有效，其他页面的response对象对当前页面无效。常用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String getCharacterEncoding() 返回响应用的是何种字符编码</span><br><span class="line">void setContentType() 设置响应的MIME类型</span><br><span class="line">printWriter getWriter() 返回可以向客户端输出字符的一个对象（注意比较printWriter和内置对象out的区别）</span><br><span class="line">sendRedirect(java.lang.String location) 重新定向客户端的请求</span><br></pre></td></tr></table></figure><p>请求转发和请求重定向区别：<br>1.请求重定向：客户端行为，<strong>response.sendRedirect()</strong>，从本质上来讲等同于两次请求，前一次请求对象不会保存，地址栏的URL对象会改变。<br>2.请求转发：服务器行为，<strong>request.getRequestDispatcher().forward(request,response)</strong>；是一次请求，转发后请求对象会保存，地址栏的URL地址不会改变。<br>代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.io.PrintWriter"</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> contentType=<span class="string">"text/html; charset=utf-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);<span class="comment">//设置响应的MIME类型</span></span><br><span class="line">    out.println(<span class="string">"&lt;h1&gt;response内置对象&lt;h1&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"&lt;hr&gt;"</span>);</span><br><span class="line">    <span class="comment">//out.flush();</span></span><br><span class="line"></span><br><span class="line">    PrintWriter outer=response.getWriter();<span class="comment">//获得输出流对象</span></span><br><span class="line">    outer.println(<span class="string">"大家好，我是response对象生成的outer对象"</span>);</span><br><span class="line"></span><br><span class="line">    response.sendRedirect(<span class="string">"reg.jsp"</span>);<span class="comment">//请求重定向</span></span><br><span class="line"> %&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在博客中添加音乐</title>
    <link href="undefined2019/11/08/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/"/>
    <url>2019/11/08/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h2 id="1-音乐来源"><a href="#1-音乐来源" class="headerlink" title="1. 音乐来源"></a>1. 音乐来源</h2><p>现在要找个 <code>.mp3</code> 外链资源可真不容易，以往的酷狗歌曲信息里带着，现在也不见了，百度音乐下载也得用客户端，还不显示链接，各大音乐网站真是越来越小心了啊。</p><h3 id="1-1-网易云音乐"><a href="#1-1-网易云音乐" class="headerlink" title="1.1 网易云音乐"></a>1.1 网易云音乐</h3><p>想要从网站获取音乐链接的方法还是有的，比如说 <a href="https://music.163.com/#" target="_blank" rel="noopener">网易云音乐</a> 。使用Google/firefox/edge等带开发者工具的浏览器打开网易云音乐，搜索自己想要的音乐，并进行播放，然后打开开发者工具。开发工具打开方式：</p><ol><li>谷歌：右键点击 <strong>检查</strong>，或使用快捷键 <code>Ctrl+Shift+I</code> ;</li><li>edge：右键点击 <strong>检查元素</strong>/ <strong>查看源</strong>，或使用快捷键 <code>F12</code> ;</li><li>firefox：快捷键 <code>Shift+F2</code> 。</li></ol><p><a href="https://www.litreily.top/assets/music/xishanyao.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/xishanyao.png" srcset="/img/loading.gif" alt="网易云音乐"></a></p><p>以 <a href="https://music.163.com/#/song?id=405253647" target="_blank" rel="noopener">夕山谣</a> 为例，打开开发工具，找到 <code>Application</code> ，打开 <code>Frames/top/Media</code> 。</p><p><a href="https://www.litreily.top/assets/music/xishanyaoLink.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/xishanyaoLink.png" srcset="/img/loading.gif" alt="开发工具"></a></p><p>右键选择” Open link in new tab “ 或者 “ Copy link address “，选取链接的前半部分,以 <code>.mp3</code> 结尾。得到链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">夕山谣http://m10.music.126.net/20161028204714/808f68e0d3afc7d68d6945d0ce8336eb/ymusic/5a20/163f/3437/9a6871479b12bc82fff53821676faedc.mp3</span><br></pre></td></tr></table></figure><h3 id="1-2-本地上传"><a href="#1-2-本地上传" class="headerlink" title="1.2 本地上传"></a>1.2 本地上传</h3><p>除了上述方法外，也可以手动制作音乐外链，当然，这需要借助于其它网站，比如 <a href="http://www.111ttt.com/up/" target="_blank" rel="noopener">www.111ttt.com/up/</a> 。在该网站上传已经下好的音乐文件，然后点击播放地址，在弹出的页面底部就有已生成的外链地址了。</p><p><a href="https://www.litreily.top/assets/music/upFile.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/upFile.png" srcset="/img/loading.gif" alt="上传音乐"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Critty 杏花弦外雨http://sc.111ttt.com/up/mp3/193721/278DF18856D56FEC6B4E6EDC15D97906.mp3</span><br></pre></td></tr></table></figure><h3 id="1-3-七牛云存储"><a href="#1-3-七牛云存储" class="headerlink" title="1.3 七牛云存储"></a>1.3 七牛云存储</h3><p><a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a> 作为国内领先的企业级云服务商，当然提供了最基本的云存储服务。当前可以免费注册并进行实名认证，之后可以获取 10GB 的免费存储空间。</p><p><a href="https://www.litreily.top/assets/music/qiniuyunSpace.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/qiniuyunSpace.png" srcset="/img/loading.gif" alt="七牛云免费空间"></a></p><p>注册并登录后，需要先创建一个空间，如 <code>litreily</code>，然后打开 <code>对象存储</code> &gt;&gt; <code>litreily</code> &gt;&gt; <code>内容管理</code>。此时便可上传文件，文件类型不限，我们可以将本地音乐文件上传后获取其外链地址。</p><p><a href="https://www.litreily.top/assets/music/qiniuyunLink.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/qiniuyunLink.png" srcset="/img/loading.gif" alt="七牛云外链获取方法"></a></p><p>所得外链地址为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CRITTY - 轮回之境http://ofx35z92m.bkt.clouddn.com/CRITTY%20-%20%E8%BD%AE%E5%9B%9E%E4%B9%8B%E5%A2%83.mp3</span><br></pre></td></tr></table></figure><h2 id="2-音乐播放器"><a href="#2-音乐播放器" class="headerlink" title="2. 音乐播放器"></a>2. 音乐播放器</h2><h3 id="2-1-网易云音乐插件"><a href="#2-1-网易云音乐插件" class="headerlink" title="2.1 网易云音乐插件"></a>2.1 网易云音乐插件</h3><p>网易云音乐提供了外链播放器，官方提供的使用方法如下：</p><ol><li>在 <a href="https://music.163.com/" target="_blank" rel="noopener">music.163.com</a> 进入单曲、歌单、专辑、电台节目页面后，点击 “生成外链播放器” 链接。</li><li>歌单和专辑外链播放器可以选择大中小三种尺寸，单曲和电台节目可以选择中小两种尺寸。你可以选择最适合你网站设计的尺寸。</li><li>还可以选择是否要自动播放，打上勾后，别人访问网站时播放器会自动开始播放。</li><li>最后将播放器的代码黏贴到你的网站上，大功告成！</li></ol><p>[示例：杏花轩外雨]</p><p><a href="https://www.litreily.top/assets/music/wlPlayer.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/wlPlayer.png" srcset="/img/loading.gif" alt="网易云音乐外链播放器"></a></p><p>[示例代码]</p><p><a href="https://www.litreily.top/assets/music/wlDemo.png" target="_blank" rel="noopener"><img src="https://www.litreily.top/assets/music/wlDemo.png" srcset="/img/loading.gif" alt="网易云音乐外链demo"></a></p><p>[示例说明]</p><ol><li>HTML源码中的 “ auto=1 “ 代表自动播放，改为0即可取消自动播放功能；</li><li>在markdown文件中引用该插件时，需要将 <code>iframe</code> 的 <code>width</code> 和 <code>height</code> 属性值用双引号包围起来，即 width=”330” height=”86” ,否则可能出现无法解析该代码的情况；</li><li>使用插件时可以添加一个类（如：class=”musicPlayer”），参考以下代码可以设置播放器的长宽。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.musicPlayer&#123;    width: 100%;    max-width: 500px;&#125;</span><br></pre></td></tr></table></figure><p>[示例播放1：height=66 auto=1]</p><iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&amp;id=32957012&amp;auto=1&amp;height=66"></iframe><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe class=&quot;musicPlayer&quot; frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot;height=&quot;86&quot; src=&quot;https://music.163.com/outchain/player?type=2&amp;id=32957012&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>[示例播放2：height=32 auto=0]</p><iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="https://music.163.com/outchain/player?type=2&amp;id=32548265&amp;auto=0&amp;height=32"></iframe><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe class=&quot;musicPlayer&quot; frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;298&quot;height=&quot;52&quot; src=&quot;https://music.163.com/outchain/player?type=2&amp;id=32548265&amp;auto=0&amp;height=32&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-audio-js"><a href="#2-2-audio-js" class="headerlink" title="2.2 audio.js"></a>2.2 audio.js</h3><p><a href="https://kolber.github.io/audiojs/" target="_blank" rel="noopener">audio.js</a>是一款轻量级的音乐播放器，下载文件后，将文件夹 “audiojs” 放在网站文件目录中，通过以下代码的形式将该播放器引入网页中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;    ...    &lt;script src=&quot;/audiojs/audio.min.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      audiojs.events.ready(function() &#123;        audiojs.createAll();      &#125;);    &lt;/script&gt;    ...&lt;/head&gt;&lt;body&gt;    ...    &lt;!-- 音乐播放器位置 --&gt;    &lt;!-- preload=&quot;auto&quot; 可以替换为 autoplay 或者 loop  --&gt;    &lt;audio class=&quot;musicPlayer&quot; src=&quot;https://sc.111ttt.com/up/mp3/397401/2A97E1C49899C77A559BCD1E224FCBAB.mp3&quot;    preload=&quot;auto&quot;&gt;&lt;/audio&gt;    &lt;!-- 说明：使用该插件后，其脚本语言将自动为其添加以下内容：        class=&quot;audiojs&quot; classname=&quot;audiojs&quot; id=&quot;audiojs_wrapper0&quot;        如果一个页面中存在多个audiojs播放器，其id尾数将从0逐一增加        通过css修改这些属性，我们可以改变播放器的外观 --&gt;    ...&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>[示例：杏花轩外雨，链接由上述1.2方式而得]</p><p>[示例html源码]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;audiojs   playing&quot; classname=&quot;audiojs&quot; id=&quot;audiojs_wrapper0&quot;&gt;    &lt;audio class=&quot;musicPlayer&quot; src=&quot;https://sc.111ttt.com/up/mp3/397401/2A97E1C49899C77A559BCD1E224FCBAB.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;    &lt;div class=&quot;play-pause&quot;&gt;                     &lt;p class=&quot;play&quot;&gt;&lt;/p&gt;                     &lt;p class=&quot;pause&quot;&gt;&lt;/p&gt;                     &lt;p class=&quot;loading&quot;&gt;&lt;/p&gt;                     &lt;p class=&quot;error&quot;&gt;&lt;/p&gt;               &lt;/div&gt;               &lt;div class=&quot;scrubber&quot;&gt;        &lt;div class=&quot;progress&quot; style=&quot;width: 167.146px;&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;loaded&quot; style=&quot;width: 280px;&quot;&gt;&lt;/div&gt;    &lt;/div&gt;               &lt;div class=&quot;time&quot;&gt;        &lt;em class=&quot;played&quot;&gt;02:22&lt;/em&gt;/&lt;strong class=&quot;duration&quot;&gt;03:57&lt;/strong&gt;               &lt;/div&gt;      &lt;div class=&quot;error-message&quot;&gt;&lt;/div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-其它"><a href="#2-3-其它" class="headerlink" title="2.3 其它"></a>2.3 其它</h3><ul><li><a href="http://www.ithome.com/html/it/195970.htm" target="_blank" rel="noopener">7 款高颜值 HTML5 播放器</a></li><li><a href="https://www.oschina.net/news/27466/html5-audio-players" target="_blank" rel="noopener">10 个基于 Web 的 HTML5 音乐播放器</a></li><li><a href="http://www.shejidaren.com/free-audio-players.html" target="_blank" rel="noopener">10 个免费开源的 JS 音乐播放器插件</a></li><li><a href="http://www.17sucai.com/pins/tag/3189.html" target="_blank" rel="noopener">播放器 jquery 特效代码</a></li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>网易云音乐的播放器插件使用方便，但是连接效率太低，经常获取不到资源或者获取速度过慢，而 audiojs 播放器虽然外观简陋些，但资源下载效率还不错，而且资源地址可以自定义，不会受限。所以，各有利弊，依情况而定吧。</p><blockquote><p>本文作者：<a href="mailto:litreily@163.com" target="_blank" rel="noopener">litreily</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse JSP/Servlet 环境搭建</title>
    <link href="undefined2019/10/30/Eclipse-JSPServlet-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>2019/10/30/Eclipse-JSPServlet-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Eclipse-JSP-Servlet-环境搭建"><a href="#Eclipse-JSP-Servlet-环境搭建" class="headerlink" title="Eclipse JSP/Servlet 环境搭建"></a>Eclipse JSP/Servlet 环境搭建</h1><p>本文假定你已安装了 JDK 环境，如未安装，可参阅 <a href=""> Java 开发环境配置 </a>。</p><p>我们可以使用 Eclipse 来搭建 JSP 开发环境，首先我们分别下载一下软件包：</p><ul><li><strong>Eclipse J2EE：</strong><a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener">http://www.eclipse.org/downloads/</a> </li><li><strong>Tomcat：</strong><a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">http://tomcat.apache.org/download-70.cgi</a> </li></ul><hr><h2 id="Tomcat-下载安装"><a href="#Tomcat-下载安装" class="headerlink" title="Tomcat 下载安装"></a>Tomcat 下载安装</h2><p>你可以根据你的系统下载对应的包(以下以Window系统为例)：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232104286524890.png" alt="img"> </p><p>下载之后，将压缩包解压到D盘（你可以自己选择）： </p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232104410586765.png" alt="img"> </p><p>注意目录名不能有中文和空格。目录介绍如下：</p><ul><li>bin：二进制执行文件。里面最常用的文件是<strong>startup.bat</strong>，如果是 Linux 或 Mac 系统启动文件为 <strong>startup.sh</strong>。</li><li>conf:配置目录。里面最核心的文件是<strong>server.xml</strong>。可以在里面改端口号等。默认端口号是8080，也就是说，此端口号不能被其他应用程序占用。</li><li>lib：库文件。tomcat运行时需要的jar包所在的目录</li><li>logs：日志</li><li>temp：临时产生的文件，即缓存</li><li>webapps：web的应用程序。<strong>web应用放置到此目录下浏览器可以直接访问</strong></li><li>work：编译以后的class文件。</li></ul><p>接着我们可以双击 startup.bat 启动 Tomcat，弹出如下界面：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232105392158264.png" alt="img"></p><p>这个时候，本地的服务器就已经搭建起来了。如果想关闭服务器，可以直接关闭上面的窗口，或者在里面输入Ctrl+C禁止服务。</p><p>接着我们在浏览器中输入 <strong><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></strong>，如果弹出如下界面，表示tomcat安装成功并且启动起来了：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/tomcat-index.jpg" alt="img"></p><p>我们现在在浏览器上测试一下它吧： </p><p>首先在D:\apache-tomcat-8.0.14\webapps\ROOT目录中新建一个jsp文件：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232106198557249.jpg" alt="img"></p><p>test.jsp 文件代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.print(&quot;菜鸟教程 : http://www.runoob.com&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>接着在浏览器中访问地址 <strong><a href="http://localhost:8080/test.jsp" target="_blank" rel="noopener">http://localhost:8080/test.jsp</a></strong>, 输出结果如下：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/test-jsp.jpg" alt="img"></p><hr><h2 id="将-Tomcat-和-Eclipse-相关联"><a href="#将-Tomcat-和-Eclipse-相关联" class="headerlink" title="将 Tomcat 和 Eclipse 相关联"></a>将 Tomcat 和 Eclipse 相关联</h2><p>Eclipse J2EE下载后，解压即可使用，我们打开Java EE ，选择菜单栏Windows–&gt;preferences（Mac 系统为 Eclipse–&gt;偏好设置），弹出如下界面：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232111301681549.png" alt="img"></p><p>上图中，点击”add”的添加按钮，弹出如下界面：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232111442933866.png" alt="img"></p><p>在选项中，我们选择对应的 Tomcat 版本，接着点击 “Next”，选择 Tomcat 的安装目录，并选择我们安装的 Java 环境：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232112245587963.png" alt="img"></p><p>点击 “Finish”，完成配置。</p><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>选择 “File–&gt;New–&gt;Dynamic Web Project”，创建 TomcatTest 项目：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232112541213100.png" alt="img"></p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/302044303245040.png" alt="img"></p><p>点开上图中的红框部分，弹出如下界面：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/8998BEC1-D622-4BD4-A9E6-8B18D2A5F29C.jpg" alt="img"></p><p>注意如果已默认选择了我们之前安装的 Tomcat 和 JDK 则可跳过此步。</p><p>然后，单击finish, 继续：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232113121219000.png" alt="img"></p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232113256216676.png" alt="img"></p><p>工程文件结构：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232113367466511.png" alt="img"></p><p>上图中各个目录解析：</p><ul><li>deployment descriptor：部署的描述。</li><li>Web App Libraries：自己加的包可以放在里面。</li><li>build：放入编译之后的文件。</li><li>WebContent:放进写入的页面。</li></ul><p>在WebContent文件夹下新建一个test.jsp文件。在下图中可以看到它的默认代码： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接着我们修改下test.jsp文件代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.println(&quot;Hello World!&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>程序运行之前，我们先修改一下浏览器选项:</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/testjsp1.png" alt="img"></p><p>接着我们运行该项目:</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/runas.png" alt="img"></p><p>运行时，弹出如下错误：(如果没有此错误，请忽略)</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232120047932694.png" alt="img"></p><p>原因是，我们之前点击了Tomcat安装包中的startup.bat，这样一来就手动打开了Tomcat服务器，这明显是多余的，因为程序运行时，eclipse会自动开启Tomcat服务器。所以我们先手动关掉tomcat软件，再次运行程序，就行了。控制台信息如下：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/232120199803353.png" alt="img"></p><p>浏览器访问 <strong><a href="http://localhost:8080/TomcatTest/test.jsp" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/test.jsp</a></strong>, 即可输出正常结果：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/A72F19CD-4FEA-4AE3-8D91-43B34623EC37.jpg" alt="img"> </p><hr><h2 id="Servlet-实例创建"><a href="#Servlet-实例创建" class="headerlink" title="Servlet 实例创建"></a>Servlet 实例创建</h2><p>我们也可以使用以上环境创建 Servlet 文件，选择 “File–&gt;New–&gt;Servlet”:</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/sns.png" alt="img"></p><p>位于 TomcatTest项目的 /TomcatTest/src 目录下创建 “HelloServlet” 类，包为 “com.runoob.test”:</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/22D8CED0-F2DD-4554-BFBD-2B19D1685FB9.jpg" alt="img"></p><p>HelloServlet.java  代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.runoob.test;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/HelloServlet&quot;)</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#HttpServlet()</span><br><span class="line">     */</span><br><span class="line">    public HelloServlet() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">     */</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 使用 GBK 设置中文正常显示</span><br><span class="line">        response.setCharacterEncoding(&quot;GBK&quot;);</span><br><span class="line">        response.getWriter().write(&quot;菜鸟教程：http://www.runoob.com&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">     */</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 /TomcatTest/WebContent/WEB-INF/web.xml 文件（如果没有），代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;web-app version=&quot;2.5&quot;   </span><br><span class="line">    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;   </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;   </span><br><span class="line">    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee   </span><br><span class="line">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;  </span><br><span class="line">  &lt;servlet&gt;  </span><br><span class="line">     &lt;!-- 类名 --&gt;  </span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;  </span><br><span class="line">    &lt;!-- 所在的包 --&gt;  </span><br><span class="line">    &lt;servlet-class&gt;com.runoob.test.HelloServlet&lt;/servlet-class&gt;  </span><br><span class="line">  &lt;/servlet&gt;  </span><br><span class="line">  &lt;servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;  </span><br><span class="line">    &lt;!-- 访问的网址 --&gt;  </span><br><span class="line">    &lt;url-pattern&gt;/TomcatTest/HelloServlet&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>接着重启 Tomcat，浏览器访问 <strong><a href="http://localhost:8080/TomcatTest/HelloServlet" target="_blank" rel="noopener">http://localhost:8080/TomcatTest/HelloServlet</a></strong>：</p><p><img src="https:////www.runoob.com/wp-content/uploads/2016/01/3E00DBEA-85CA-4F66-A7E9-24C43BC9C756.jpg" alt="img"></p><p>参考文章：<a href="http://www.cnblogs.com/smyhvae/p/4046862.html" target="_blank" rel="noopener">http://www.cnblogs.com/smyhvae/p/4046862.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JSP 开发环境搭建</title>
    <link href="undefined2019/10/30/JSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>2019/10/30/JSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="JSP-开发环境搭建"><a href="#JSP-开发环境搭建" class="headerlink" title="JSP 开发环境搭建"></a>JSP 开发环境搭建</h1><p>JSP 开发环境是您用来开发、测试和运行 JSP 程序的地方。</p><p>本节将会带您搭建 JSP 开发环境，具体包括以下几个步骤。</p><p>如果你使用的是 Eclipse 环境，可以直接参阅：<a href="http://www.runoob.com/jsp/eclipse-jsp.html" target="_blank" rel="noopener">Eclipse JSP/Servlet 环境搭建</a>。</p><hr><h2 id="配置Java开发工具（JDK）"><a href="#配置Java开发工具（JDK）" class="headerlink" title="配置Java开发工具（JDK）"></a>配置Java开发工具（JDK）</h2><p>这一步涉及 Java JDK 的下载和 PATH 环境变量的配置。 </p><p>您可以从 Oracle 公司的 Java 页面中下载 JDK：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java SE Downloads</a> </p><p>Java JDK 下载完后，请按照给定的指示来安装和配置 JDK。最后，通过设置 PATH 和  JAVA_HOME环境变量来指明包括 java 和 javac 的文件夹路径，通常是 java_install_dir/bin和java_install_dir。 </p><p>假如您用的是 Windows 系统并且 JDK 的安装目录为 C::\jdk1.5.0_20，那么您就需要在 C:\autoexec.bat 文件中添加以下两行： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set PATH=C:\jdk1.5.0_20\bin;%PATH%</span><br><span class="line">set JAVA_HOME=C:\jdk1.5.0_20</span><br></pre></td></tr></table></figure><p>或者，在 Windows NT/2000/XP下，您可以直接右击我的电脑图标，选择属性，然后高级，然后环境变量，接下来您就可以很方便地设置 PATH 变量并且确定退出就行了。 </p><p>在 Linux/Unix 系统下，如果 JDK 的安装目录为 /usr/local/jdk1.5.0_20 并且使用的是 C shell，那么您就需要在 .cshrc 文件中添加以下两行： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenv PATH /usr/local/jdk1.5.0_20/bin:$PATH</span><br><span class="line">setenv JAVA_HOME /usr/local/jdk1.5.0_20</span><br></pre></td></tr></table></figure><p>或者，假如您正在使用类似于 Borland JBuilder、Eclipse、IntelliJ IDEA 和 Sun ONE Studio 这样的集成开发环境，可以试着编译并运行一个简单的程序来确定 IDE（集成开发环境）是否已经知道 JDK 的安装目录。 </p><p>本步骤你也可以参考本站<a href="">Java 开发环境配置</a>章节的教程。</p><hr><h2 id="设置Web服务器：Tomcat"><a href="#设置Web服务器：Tomcat" class="headerlink" title="设置Web服务器：Tomcat"></a>设置Web服务器：Tomcat</h2><p>目前，市场上有很多支持 JSP 和 Servlets 开发的 Web 服务器。他们中的一些可以免费下载和使用，Tomcat 就是其中之一。 </p><p>Apache Tomcat 是一个开源软件，可作为独立的服务器来运行 JSP 和 Servlets，也可以集成在 Apache Web Server 中。以下是 Tomcat 的配置方法： </p><ul><li>下载最新版本的 Tomcat：<a href="http://tomcat.apache.org/。" target="_blank" rel="noopener">http://tomcat.apache.org/。</a></li><li></li><li>下载完安装文件后，将压缩文件解压到一个方便的地方，比如 Windows 下的 C:\apache-tomcat-5.5.29 目录或者 Linux/Unix 下的 /usr/local/apache-tomcat-5.5.29 目录，然后创建 CATALINA_HOME 环境变量指向这些目录。 </li></ul><p>在 Windows 机器下，Tomcat 可以通过执行以下命令来启动： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%CATALINA_HOME%\bin\startup.bat</span><br><span class="line">或者</span><br><span class="line">C:\apache-tomcat-5.5.29\bin\startup.bat</span><br></pre></td></tr></table></figure><p>在 Linux/Unix 机器下，Tomcat 可以通过执行以下命令来启动： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$CATALINA_HOME/bin/startup.sh</span><br><span class="line">或者</span><br><span class="line">/usr/local/apache-tomcat-5.5.29/bin/startup.sh</span><br></pre></td></tr></table></figure><p>成功启动 Tomcat 后，通过访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 便可以使用 Tomcat 自带的一些 web 应用了。假如一切顺利的话，您应该能够看到以下的页面： </p><p><img src="https:////www.runoob.com/wp-content/uploads/2014/01/TomcatHomePage.jpg" alt="img"> </p><p>更多关于配置和运行 Tomcat 的信息可以在 Tomcat 提供的文档中找到，或者去 Tomcat 官网查阅：<a href="http://tomcat.apache.org。" target="_blank" rel="noopener">http://tomcat.apache.org。</a> </p><p>在 Windows 机器下，Tomcat 可以通过执行以下命令来停止： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%CATALINA_HOME%\bin\shutdown</span><br><span class="line">或者</span><br><span class="line">C:\apache-tomcat-5.5.29\bin\shutdown</span><br></pre></td></tr></table></figure><p>在 Linux/Unix 机器下，Tomcat 可以通过执行以下命令来停止： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$CATALINA_HOME/bin/shutdown.sh</span><br><span class="line">或者</span><br><span class="line">/usr/local/apache-tomcat-5.5.29/bin/shutdown.sh</span><br></pre></td></tr></table></figure><hr><h2 id="设置-CLASSPATH-环境变量"><a href="#设置-CLASSPATH-环境变量" class="headerlink" title="设置 CLASSPATH 环境变量"></a>设置 CLASSPATH 环境变量</h2><p>由于 servlets 不是 Java SE 的一部分，所以您必须标示出 servlet 类的编译器。 </p><p>假如您用的是 Windows 机器，您需要在 C:\autoexec.bat 文件中添加以下两行： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set CATALINA=C:\apache-tomcat-5.5.29</span><br><span class="line">set CLASSPATH=%CATALINA%\common\lib\jsp-api.jar;%CLASSPATH%</span><br></pre></td></tr></table></figure><p>或者，在 Windows NT/2000/XP 下，您只要右击我的电脑，选择属性，然后点击高级，然后点击环境变量，接下来便可以设置 CLASSPATH 变量并且确定退出即可。 </p><p>在 Linux/Unix 机器下，假如您使用的是 C shell，那么您就需要在 .cshrc 文件中添加以下两行： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenv CATALINA=/usr/local/apache-tomcat-5.5.29</span><br><span class="line">setenv CLASSPATH $CATALINA/common/lib/jsp-api.jar:$CLASSPATH</span><br></pre></td></tr></table></figure><p>注意：如果您的开发路径是 C:\JSPDev (Windows)或者 /usr/JSPDev (Linux/Unix)，那么您就需要将这些路径添加进 CLASSPATH 变量中。 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="undefined2019/10/30/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/10/30/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><h4 id="第一步：删除"><a href="#第一步：删除" class="headerlink" title="第一步：删除"></a>第一步：删除</h4><blockquote><p>因为是重新创建，所以要把之前的blog目录删掉。</p></blockquote><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/1.png" alt="img"></p><h4 id="第二步：安装框架"><a href="#第二步：安装框架" class="headerlink" title="第二步：安装框架"></a>第二步：安装框架</h4><p>在<code>hexo</code>目录中打开<code>Git Bash</code></p><p>输入代码：<code>npm install hexo-cli -g</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/2.png" alt="img"></p><blockquote><p>该过程根据电脑内存的不同可能会持续30s-60s，耐心等待</p></blockquote><h4 id="第三步：创建blog"><a href="#第三步：创建blog" class="headerlink" title="第三步：创建blog"></a>第三步：创建blog</h4><p>输入代码：<code>hexo init blog</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/3.png" alt="img"></p><blockquote><p>该过程也是会持续一段时间</p></blockquote><h4 id="第四步：切换目录"><a href="#第四步：切换目录" class="headerlink" title="第四步：切换目录"></a>第四步：切换目录</h4><p>输入代码：<code>cd blog</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/4.png" alt="img"></p><p><em>查看是否切换</em></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/5.png" alt="img"></p><h4 id="第五步：安装组件"><a href="#第五步：安装组件" class="headerlink" title="第五步：安装组件"></a>第五步：安装组件</h4><p>输入代码：<code>npm install</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/6.png" alt="img"></p><h4 id="第六步：生成静态页面"><a href="#第六步：生成静态页面" class="headerlink" title="第六步：生成静态页面"></a>第六步：生成静态页面</h4><p>输入代码：<code>hexo g</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/7.png" alt="img"></p><h4 id="第七步：启动本地服务器"><a href="#第七步：启动本地服务器" class="headerlink" title="第七步：启动本地服务器"></a>第七步：启动本地服务器</h4><p>输入代码：<code>hexo s</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/8.png" alt="img"></p><p>然后在浏览器输入网址：<code>localhost:4000</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/9.png" alt="img"></p><p>这只是本地博客，下面配置远端博客</p><p>在命令界面按<code>Ctrl</code>+<code>C</code>结束本地服务器</p><h4 id="第八步：布置deployer目录"><a href="#第八步：布置deployer目录" class="headerlink" title="第八步：布置deployer目录"></a>第八步：布置deployer目录</h4><p>输入代码：<code>npm install --save hexo-deployer-git</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/10.png" alt="img"></p><blockquote><p>该过程需要一段时间的加载，耐心等待！</p></blockquote><h4 id="第九步：修改-config-yml文件"><a href="#第九步：修改-config-yml文件" class="headerlink" title="第九步：修改_config.yml文件"></a>第九步：修改_config.yml文件</h4><p>打开<code>hexo</code>根目录下的<code>_config.yml</code>文件，修改其<code>deploy</code>标签的内容(应该在最下面)</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/11.png" alt="img"></p><p><strong>repo后面的Frightings修改成你们自己的名字！冒号后面跟个空格！</strong></p><p>修改后输入代码：<code>hexo clean</code>清理缓存，</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/12.png" alt="img"></p><p>然后输入代码：<code>hexo g</code>重新布置静态页面。</p><h4 id="第十步：布置远端博客"><a href="#第十步：布置远端博客" class="headerlink" title="第十步：布置远端博客"></a>第十步：布置远端博客</h4><p>输入代码：<code>hexo d</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/13.png" alt="img"></p><p>然后他会让你告诉他，你是谁~（Please tell me who you are）</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/14.png" alt="img"></p><p>接着咱们就告诉他，咱是谁~</p><p>输入代码：<code>git config --global user.email &quot;youremail@qq.com&quot;</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/15.png" alt="img"></p><p><strong>注意！ 这边<a href="mailto:youremail@qq.com" target="_blank" rel="noopener">youremail@qq.com</a>不是让你照搬抄上！是让你写上你自己的邮箱！</strong></p><p>接着输入代码：<code>git config --global user.name &quot;yourname&quot;</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/16.png" alt="img"></p><p><strong>同样，这边yourname不是让你照搬抄上！是让你写上你自己的用户名。</strong></p><p>然后依次输入代码:<code>hexo clean</code>清理下缓存，</p><p><code>hexo g</code>生成静态页面，<code>hexo d</code>布置远端。</p><h4 id="第十一步：查看效果"><a href="#第十一步：查看效果" class="headerlink" title="第十一步：查看效果"></a>第十一步：查看效果</h4><p>然后在网站中输入你的博客地址<code>yourname.github.io</code>就会出现你的博客。</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/17.png" alt="img"></p><h4 id="第十二步：写博客"><a href="#第十二步：写博客" class="headerlink" title="第十二步：写博客"></a>第十二步：写博客</h4><p>输入代码：<code>hexo new &quot;我的第一篇博客&quot;</code></p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/18.png" alt="img"></p><p>这上面写出了你的博客路径，找到他进行编辑。</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/19.png" alt="img"></p><p>打开后：</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/20.png" alt="img"></p><p>上面有个<code>tags</code>标签,目前没什么用，先<strong>删除</strong>，要不然可能会编译错误。</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/21.png" alt="img"></p><p>编辑完之后：</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/22.png" alt="img"></p><h4 id="第十三步：查看效果"><a href="#第十三步：查看效果" class="headerlink" title="第十三步：查看效果"></a>第十三步：查看效果</h4><p>十二步完成后，依次输入代码：<code>hexo clean</code>清理缓存，</p><p>输入代码：<code>hexo g</code>生成静态页面，</p><p>可以发现里面的<code>INFO</code>项中加载了自己写的博客。</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/23.png" alt="img"></p><p>输入代码：<code>hexo d</code> 缓存到GitHub。</p><p>然后再刷新一下自己的博客地址，可以发现自己写的博客已经显示了。</p><p><img src="https://czongz.github.io/2019/10/10/hexo-da-jian-ge-ren-bo-ke/24.png" alt="img"></p><p><strong>如果需要继续添加文章，也是相同的步骤和代码。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jsp</title>
    <link href="undefined2019/10/30/jsp%E7%9A%84request%E5%AF%B9%E8%B1%A1/"/>
    <url>2019/10/30/jsp%E7%9A%84request%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="jsp的request对象主要方法"><a href="#jsp的request对象主要方法" class="headerlink" title="jsp的request对象主要方法"></a>jsp的request对象主要方法</h3><h6 id="request对象的方法非常多，只写其中常用的几种方法。"><a href="#request对象的方法非常多，只写其中常用的几种方法。" class="headerlink" title="request对象的方法非常多，只写其中常用的几种方法。"></a>request对象的方法非常多，只写其中常用的几种方法。</h6><ul><li><p><strong>getAttribute(String name);</strong>这个方法可以取出<strong>name</strong>属性的值，<strong>name</strong>属性的值可以用<strong>setAttribute(String name,Object o);</strong>方法赋值，如果没有对其赋值，则默认<strong>name</strong>为<strong>null</strong>;    </p></li><li><p><strong>getContexntPath();</strong>这个方法可以获取服务器上下文的路径；</p></li><li><p><strong>getCookies();</strong>这个方法可以获取客户端的Cookies（一个保存在客户机中的简单的文本文件）；</p></li><li><p><strong>getHeader(String name)</strong>这个方法可以获取指定名称的HTTP报头的属性值；</p></li><li><p><strong>getParameter(String name)</strong>这个方法可以获取客户端提交到服务器的参数；</p></li><li><p><strong>getServerName()</strong>这个方法可以获得服务器的名称</p></li><li><p><strong>getServerPort()</strong>这个方法可以获得服务器的访问端口</p></li><li><p><strong>setAttribute(String name,Object o);</strong>对name属性赋值</p></li><li><p><strong>removeAttribute(String name)</strong>这个方法移除指定名称的属性</p></li><li><p><strong>getRemoteAddr()</strong>这个方法返回客户端的IP地址</p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"gb2312"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;request实例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"attr"</span>, <span class="string">"hello!"</span>);</span><br><span class="line">out.print(<span class="string">"attr的值"</span>+request.getAttribute(<span class="string">"attr"</span>)+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.print(<span class="string">"上下文路径"</span>+request.getContextPath()+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.print(<span class="string">"Cookies:"</span>+request.getCookies()+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.print(<span class="string">"Host:"</span>+request.getHeader(<span class="string">"Host"</span>)+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.print(<span class="string">"服务器名称："</span>+request.getServerName()+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.print(<span class="string">"服务器端口："</span>+request.getServerPort()+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.print(<span class="string">"客户端的IP地址："</span>+request.getRemoteAddr()+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">request.removeAttribute(<span class="string">"attr"</span>);</span><br><span class="line">out.print(<span class="string">"属性移除后的attr的值："</span>+request.getAttribute(<span class="string">"attr"</span>)+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><img src="http://a1.qpic.cn/psb?/V13S9xI31Px2LW/p5RYDG8GnkBkSSMOzIUH7uJq0KspJo3TBS*Hf.Iwp9M!/c/dFQBAAAAAAAA&ek=1&kp=1&pt=0&bo=nwEkAZ8BJAEDGTw!&tl=1&vuin=1458566939&tm=1571918400&sce=60-2-2&rf=0-0" style="zoom:150%;" /><ul><li>补充一个<strong>request.setCharacterEncoding(“utf-8”);</strong>用来改变传递参数的编码</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL知识点</title>
    <link href="undefined2019/10/30/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>2019/10/30/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql数据库知识点"><a href="#Mysql数据库知识点" class="headerlink" title="Mysql数据库知识点"></a>Mysql数据库知识点</h1><h2 id="1-管理数据库语句："><a href="#1-管理数据库语句：" class="headerlink" title="1.管理数据库语句："></a>1.管理数据库语句：</h2><p><strong>使用数据库：</strong></p><p>use 数据库名;</p><p><strong>添加数据库：</strong></p><p>create database 数据库名;</p><p><strong>修改数据库：</strong></p><p>alter database 数据库名;</p><p><strong>删除数据库：</strong></p><p>drop database 数据库名;</p><p><strong>查看所有数据库：</strong></p><p>show databases;</p><h2 id="2-管理表语句："><a href="#2-管理表语句：" class="headerlink" title="2.管理表语句："></a><strong>2.管理表语句：</strong></h2><p><strong>添加数据表：</strong></p><p>create table 表名(</p><p>　　列名 数据类型 数据约束,</p><p>　　列名 数据类型 数据约束</p><p>);</p><p>create table student(</p><p>　　name varchar(20) not null,</p><p>　　age int(4)</p><p>)</p><p><strong>修改数据表：</strong></p><p>alter table 表名;</p><p>1)在表中增加新字段</p><p>alter table student add colunm name varchar(20);</p><p>2)删除表中的字段</p><p>alter table student drop name;</p><p>3)修改表中字段的类型</p><p>alter table student modify name varchar(10);</p><p><strong>删除数据表：</strong></p><p>drop table 表名;</p><p>drop table student;</p><p><strong>查看所有表：</strong></p><p>show tables;</p><h2 id="3-管理数据语句："><a href="#3-管理数据语句：" class="headerlink" title="3.管理数据语句："></a>3.管理数据语句：</h2><p><strong>插入数据：</strong></p><p>insert into 表名 (列1,列2…) values (值1,值2…);</p><p>insert into student (name,age) values (‘张三’,20);</p><p><strong>更新数据：</strong></p><p>update 表名 set 列=修改值 where 条件;</p><p>update student set name=’李四’ where name=’张三’;</p><p><strong>删除数据：</strong></p><p>delete from 表名 where 条件;</p><p>delete from student where name=’李四’;</p><p><strong>查询数据：</strong></p><p>selete * from 表名 where 条件;</p><p>selete * from student where name=’张三’;</p><h2 id="4-各种查询语句："><a href="#4-各种查询语句：" class="headerlink" title="4.各种查询语句："></a><strong>4.各种查询语句：</strong></h2><p><strong>查询时指定别名：</strong></p><p>1) selete id AS ‘编号’,name AS ‘姓名’ from student;</p><p>2) selete id ‘编号’,name ‘姓名’ from student;(AS可以省略)</p><p><strong>查询时合并列：</strong></p><p>需求:查询每个学生的总分</p><p>selete name AS ‘姓名’,(servlet+mysql) AS ‘总成绩’ from student;</p><p>注意:合并列的字段必须是数值类型的字段</p><p><strong>查询时去除重复(distinct)：</strong></p><p>需求:查询有哪些地区的学生</p><p>selete DISTINCT address from student;</p><p>另一种语法</p><p>selete DISTINCT(address) from student;</p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a><strong>条件查询</strong></h3><p><strong>逻辑条件: and  or</strong></p><p>需求:查询学生的id为1，且姓名为张三的学生</p><p>selete * from student where id=1 and name=’张三’;(交集)</p><p>需求:查询学生的id为2，或姓名为张三的学生</p><p>selete * from student where id=2 or name=’张三’;(并集)</p><p><strong>比较条件: &gt;  &lt;  &gt;=  &lt;=  =  &lt;&gt;  (between and–在…之间 包前包后)</strong></p><p>需求:查询servlet分数大于80分的学生</p><p>selete * from student where servlet&gt;80;</p><p>需求:查询mysql分数小于或等于85分的学生</p><p>selete * from student where mysql&lt;=85;</p><p>需求:查询servlet分数大于或等于80分，且小于或等于85分的学生</p><p>selete * from student where servlet&gt;=80 AND servlet&lt;=85;</p><p>代替上面语句的语法</p><p>selete * from student where servlet BETWEEN 80 AND 85;</p><p>需求:查询年龄不等于30的学生</p><p>selete * from student where age&lt;&gt;30;</p><p><strong>判空条件: is null,  is not null,  =**</strong>’’<strong><strong>,  &lt;&gt;</strong></strong>’’**</p><p>Null:表示没有数据</p><p>空字符:表示有数据</p><p>需求:查询没有性别数据的学生(数据‘男’或‘女’)</p><p>selete* from student where gender IS NULL OR gender=’’;</p><p>需求:查询有性别数据的学生</p><p>selete * from student where gender IS NOT NULL AND gender&lt;&gt;’’;</p><p><strong>模糊条件: like</strong></p><p>模糊替代符号:</p><p>%:替代任意个字符</p><p>_:替代一个字符</p><p>需求:查询姓“李”的学生</p><p>SELECT * FROM student WHERE NAME LIKE ‘李%’;</p><p>需求:查询姓名中包含‘四’字的学生</p><p>SELECT * FROM student WHERE NAME LIKE ‘%四%’;</p><p>需求:查询姓‘李’，全名只有两个字的学生</p><p>SELECT * FROM student WHERE NAME LIKE ‘李_’;</p><p><strong>聚合函数查询(用于统计结果)</strong></p><p>Max()取最大值  min()取最小值  avg()取平均值  count()统计标的记录数量 sum()求和</p><p>需求:查询servlet的最高分</p><p>SELECT MAX(servlet) FROM student;</p><p>需求:查询mysql的最低分</p><p>SELECT MIN(mysql) FROM student;</p><p>需求:查询servlet的平均分</p><p>SELECT AVG(servlet) FROM student;</p><p>需求:查询当前有几个学生</p><p>SELECT COUNT(*) FROM student;</p><p>需求:查询servlet成绩的总和</p><p>SELETE SUM(servlet) from student;</p><p><strong>分页查询(limit)</strong></p><p>Limit起始行数，查询的行数</p><p>起始行数从0开始</p><p>需求:查询第1,2条数据</p><p>SELECT * FROM student LIMIT 0,2;</p><p>分页查询需知道:当前页码，每页显示条数</p><p>结论分页查询当前页数据:select * from student limit (当前页码-1)*每页显示条数，每页显示条数;</p><p>需求:学生共20条数据，每页显示5条，共4页</p><p>查询第3页(第11到15条)的学生数据:select * from student limit 10,5;</p><p><strong>查询后排序(order by)</strong></p><p>DESC:降序。数值从大到小，字母z-a</p><p>ASC:升序。数值从小到大，字母a-z</p><p>默认情况下，按照插入的顺序排序</p><p>需求:按照id的升序排序</p><p>select * from student order by id asc;</p><p>需求:按照servlet成绩降序排序</p><p>select * from student order by servlet desc;</p><p>多个排序条件的情况:先按照前面的条件排序，当出现重复记录，再按照后面的条件排序</p><p>需求:按照age升序，再按照servlet成绩升序排序</p><p>select * from student order by age asc,servlet asc;</p><p><strong>分组查询(group by)</strong></p><p>需求:查询每个地区有多少人</p><p>SELECT address,COUNT(*) FROM student GROUP BY address;</p><p>需求:统计男女的人数</p><p>注意:where条件必须放在group by 分组之前</p><p>SELECT gender,COUNT(*) FROM student WHERE gender IS NOT NULL AND gender&lt;&gt;’’ GROUP BY gender;</p><p><strong>分组后筛选(having)</strong></p><p>需求:查询哪些地区的人数是大于2个的地区</p><p>查询哪些地区多少人 2)筛选人数大于2的地区</p><p>注意:having使用在group by分组之后，对分组后的条件进行筛选</p><p>SELECT address,COUNT(<em>) FROM student GROUP BY address HAVING COUNT(</em>)&gt;2;</p><h2 id="5-数据约束（给表添加数据约束，从而约束用户操作表数据的行为）"><a href="#5-数据约束（给表添加数据约束，从而约束用户操作表数据的行为）" class="headerlink" title="5.数据约束（给表添加数据约束，从而约束用户操作表数据的行为）"></a>5.数据约束（给表添加数据约束，从而约束用户操作表数据的行为）</h2><p><strong>1）默认值约束(default)</strong></p><p>create table test(</p><p>　　name varchar(20),</p><p>　　gender varchar(20) default ‘男’</p><p>)</p><p>需求:当不插入gender的时候，分配一个‘男’的默认值</p><p>注意:1)当没有插入gender字段的时候，分配一个默认值</p><p><strong>2）非空约束（not null）</strong></p><p>create table test(</p><p>　　name varchar(20) not null,</p><p>　　gender varchar(20)</p><p>)</p><p>需求；name字段一定要有值(不能不插入数据，不能是null)，这是给name添加非空约束</p><p>1)非空约束，不能不插入值</p><p>Insert into test(gender) values(‘男’);</p><p>2)非空约束，不能插入null</p><p>Insert into test(name,gender) values(null,’男’);</p><p><strong>3)唯一约束(unique)</strong></p><p>create table test(</p><p>　　Id int unique,</p><p>　　name varchar(20)</p><p>)</p><p>需求:id的值不能出现重复。这时就要给id添加一个唯一约束</p><p>1)不能插入重复的值</p><p>2)唯一约束，可以插入多个null。所以唯一约束不能约束null</p><p>Insert into test(id,name) values(1,’张三’);</p><p><strong>4)主键约束(primary key)(唯一+非空)</strong></p><p>注意；</p><p>1)通常情况下，我们会给每张表都设置一个主键字段，用来标记记录的唯一性</p><p>2)但是不建议把业务含义字段作为主键，因为随着业务的变化，业务字段可能出现重复</p><p>3)建议给每张表都独立添加一个叫id的字段，把这个id字段设置成主键，用来作为记录的唯一性</p><p>create table test(</p><p>　　Id int primary key,</p><p>　　name varchar(20)</p><p>)</p><p>1)唯一性</p><p>2)非空性</p><p><strong>5)自增长约束(auto_increment)</strong></p><p>create table test(</p><p>　　Id int primary key auto_increment,</p><p>　　name varchar(20)</p><p>)</p><p>自增长约束:初始值为0，每次递增1</p><p>使用truncate table 删除数据的时候，可以把自增长的初始值置为0</p><p><strong>6)外键约束</strong></p><p>员工表(副表:被别的表约束的表，外键设置在副表)</p><p>Create table employee(</p><p>　　Id int primary key auto_increment,</p><p>　　name varchar(20),</p><p>　　deptId int,</p><p>　　添加外键约束(foreign key)</p><p>　　Constraint employee_dept_fk foreign key(deptId) references dept(id)</p><p>​     　　　　　　 外键名                外键字段        </p><p>)</p><p>部门表(主表:约束别人的表)</p><p>Create table dept(</p><p>　　Id int primary key auto_increment,</p><p>　　Name varchar(20)</p><p>)</p><p><strong>外键约束在什么情况下会起作用？</strong></p><p>插入数据:当往副表插入了主表中不存在的数据时，外键起作用</p><p>修改数据:当往副表中修改主表中不存在的数据时，外键起作用</p><p>删除数据:副表中有关联主表数据的情况下，当删除主表数据时，外键起作用</p><p><strong>当有了外键之后，应该如何管理数据呢？</strong></p><p>插入数据:先插入主表的数据，再插入副表数据</p><p>修改数据:先修改主表数据，再修改副表数据</p><p>删除数据:先删除副表数据，再删除主表数据</p><h2 id="6-数据库设计的三大范式"><a href="#6-数据库设计的三大范式" class="headerlink" title="6.数据库设计的三大范式"></a><strong>6.数据库设计的三大范式</strong></h2><p><strong>第一范式；要求表的每个字段必须独立的不可分割的单元</strong></p><p>学生表: student name —违反第一范式</p><p>​        张三|狗娃</p><p>   王涵|张小涵</p><p>查询:现用名中包含‘张’的学生</p><p>Select * from student where name like ‘%张%’;</p><p>学生表: student name old_name —符合第一范式</p><p>​          张三  狗娃</p><p>​    王涵       张小涵</p><p><strong>第二范式:在第一范式的基础上，要求表的除主键以外的字段都和主键有依赖关系</strong></p><p>一张表只表达一个意思</p><p>员工表:employee</p><p>员工编号  员工姓名  部门名称   订单名称  —违反第二范式</p><p>员工表:employee</p><p>员工编号  员工姓名  部门名称   —符合第二范式</p><p>​      订单表:</p><p>​      订单编号 订单名称</p><p><strong>第三范式:在第二范式的基础上，要求表的除主键以外的字段都只能和主键有直接决定的依赖关系</strong></p><p>员工表:employee</p><p>员工编号  员工姓名  部门编号 部门名称 —违反第三范式(出现数据冗余)</p><p>​        1     张三    1     软件开发部</p><p>​        2     李四    1     软件开发部</p><p>员工表:employee</p><p>员工编号  员工姓名  部门编号  —符合第三范式</p><p> 1     张三    1</p><p> 2     李四    1</p><p>部门表:dept</p><p>部门编号  部门名称</p><p>1      软件开发部</p><h2 id="7-多表查询"><a href="#7-多表查询" class="headerlink" title="7.多表查询"></a><strong>7.多表查询</strong></h2><p><strong>1.交叉连接查询(笛卡尔乘积:4*3=12，产生笛卡尔积的原因是没有足够的连接条件)(一般不用)</strong></p><p>需求:查询员工及其部门名称</p><p>SELECT employee.name,dept.name</p><p>FROM employee,dept;</p><p><strong>2.内连接查询(使用最多)</strong></p><p>多表查询的步骤:1)确定查询哪些表</p><p>​        2)确定查询哪些字段</p><p>​        3)确定连接条件(规则:条件=表数量-1)</p><p>SELECT employee.name,dept.name</p><p>FROM employee,dept</p><p>WHERE employee.deptId=dept.id;</p><p>另一种语法</p><p>SELECT e.name,d.name</p><p>FROM employee e</p><p>INNER JOIN dept d</p><p>ON e.deptId=d.id;</p><p><strong>3.左外连接查询(左表数据全部显示，如果右边不满足，则显示null)</strong></p><p>需求:查询部门及其部门的员工</p><p>SELECT d.name,e.name</p><p>FROM dept d</p><p>LEFT OUTER JOIN employee e</p><p>ON d.id=e.deptId;</p><p><strong>4.右外连接查询(右表数据全部显示，如果左边不满足，则显示null)</strong></p><p>SELECT d.name,e.name</p><p>FROM employee e</p><p>RIGHT OUTER JOIN dept d</p><p>ON e.deptId=d.id;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA面向对象知识点汇总</title>
    <link href="undefined2019/10/30/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>2019/10/30/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-类和对象的创建"><a href="#第二章-类和对象的创建" class="headerlink" title="第二章 类和对象的创建"></a>第二章 类和对象的创建</h1><p>1.面向对象的概念<br>面向对象的思想是把一个项目，一件事情分成更小的项目，或者说分成一个个更小的部分，<br>每一部分负责什么方面的功能，最后再由这些部分组合而成为一个整体。</p><p>2.类的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：public class 类名&#123;&#125;</span><br><span class="line">File---&gt;new---&gt;class---&gt;类名</span><br></pre></td></tr></table></figure><p>3.创建对象<br>类名 对象名 =new 类名()；<br>对象名.方法名()；对象名.属性<br>4.构造方法：方法名和类名相同，没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">public 类名（）&#123;&#125;//主要作用是初始化操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.构造方法的重载：在同一个类中，方法名相同，参数个数，顺序，类型不相同的构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">public 类名（）&#123;&#125;</span><br><span class="line">public 类名（String name，int age）&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.构造方法的执行：<br>new 类名（）；—&gt;执行构造方法<br>super（）；—&gt;执行了父类的构造方法<br>7.static静态修饰符<br>静态修饰符可以修饰属性，方法，代码块<br>类名.属性 类名.方法名<br>8.Java内存（栈和堆，static，方法区，gc（垃圾回收机制））</p><h2 id="第三章-面向对象三大特征—封装"><a href="#第三章-面向对象三大特征—封装" class="headerlink" title="第三章 面向对象三大特征—封装"></a>第三章 面向对象三大特征—封装</h2><p>1.封装的概念<br>封装是指将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息<br>而是通过该类所提供的方法来实现对内部信息的操作访问<br>2.封装的步骤<br>（1）把属性私有化（private）<br>（2）对这些属性设置get和set方法<br>（3）调用处理这些方法<br>3.封装的作用：避免一些用户不合理的操作<br>4.修饰符<br>（1）public—&gt;公共的：在一个项目中都可以访问，权限最高<br>（2）private—&gt;私有的：只能在本类中进行访问，权限最低<br>（3）protected—&gt;安全的，受保护的：同一个包中才能进行访问，继承中子类可以访问父类<br>（4）default—&gt;默认的：同一个包中能访问</p><h2 id="第四章-面向对象的三大特征—继承"><a href="#第四章-面向对象的三大特征—继承" class="headerlink" title="第四章 面向对象的三大特征—继承"></a>第四章 面向对象的三大特征—继承</h2><p>1.继承的概念<br>子类继承父类的属性，方法。<br>2.继承的关键字：extends<br>3.继承的语法：<br>public class 类名 extends 父类{}<br>4.使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">public void shout()&#123;</span><br><span class="line">system.out.println(&quot;动物发出叫声&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//子类重写</span><br><span class="line">public viod shout()&#123;</span><br><span class="line">system.out.println(&quot;某一种动物发出叫声&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">public static void main(String[]args)&#123;</span><br><span class="line">父类 引用变量名=new 父类();//创建父类的实例对象</span><br><span class="line">引用变量名.shout();//调用父类重写</span><br><span class="line">shout()方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.父类构造方法调用：super（）；<br>调用父类的构造方法必须在子类中调用<br>必须在子类构造方法的第一行<br>6.重写@Override<br>必须继承<br>方法名一致，参数个数，顺序，类型全部一致</p><h2 id="第五章-面向对象（多态）"><a href="#第五章-面向对象（多态）" class="headerlink" title="第五章 面向对象（多态）"></a>第五章 面向对象（多态）</h2><p>1.多态的概念<br>指不同类的对象对同一消息做出响应<br>2.多态的必要条件<br>继承<br>重写<br>父类引用指向子类对象（向上转型）<br>3.多态的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Father&#123;</span><br><span class="line"> public void cooking()&#123;</span><br><span class="line"> System.out.println(&quot;米饭&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  public class Son extends Father&#123;</span><br><span class="line"> public void cooking()&#123;</span><br><span class="line"> System.out.println(&quot;熬粥&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Father son=new Son();</span><br><span class="line">son.cooking();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.向下转型<br>Son son=(Son)father;</p><h2 id="第六章-抽象"><a href="#第六章-抽象" class="headerlink" title="第六章 抽象"></a>第六章 抽象</h2><p>1.抽象的概念<br>抽象就是用程序的逻辑方法和数据结构来模拟现实的世界<br>2.抽象的关键字<br>abstract<br>可以修饰类，可以修饰方法<br>3.抽象的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//抽象类 </span><br><span class="line">public abstract class 类名&#123; </span><br><span class="line">//抽象方法没有方法体 </span><br><span class="line">public abstract void 方法名();</span><br><span class="line">&#125;</span><br><span class="line">//当父类是抽象类的时候，子类必须重写父类里面的抽象方法</span><br></pre></td></tr></table></figure><p>4.final修饰符：最终的<br>修饰变量，修饰方法，修饰类<br>1.当修饰变量时，变量转换成常量，常量的值不能改变<br>final int a=18;//a=18;不能改变,必须给一个初始值<br>2.当修饰方法时，该方法不能被重写<br>3.当修饰类时，该类不能被继承</p><h2 id="第七章-接口"><a href="#第七章-接口" class="headerlink" title="第七章 接口"></a>第七章 接口</h2><p>1.接口的概念<br>接口是一套规范，满足这个规范的设备，就可以将他们组装到一起，也可以实现具体复杂事物但有规律的功能<br>2.接口的关键字<br>interface<br>3.接口的语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">实现接口的关键字  implements  </span><br><span class="line">public interface 接口名&#123;  </span><br><span class="line">//接口是纯抽象类  </span><br><span class="line">//接口里面的方法都是抽象方法 </span><br><span class="line">void setData();  </span><br><span class="line">&#125;  </span><br><span class="line">public class Play implements 接口名&#123; </span><br><span class="line">void setData()&#123;  </span><br><span class="line">&#125; </span><br><span class="line">&#125;  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line">Play play=new Play();  </span><br><span class="line">play.setData();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">注意接口可以进行多继承</span><br><span class="line">    public interface 接口名 extends 接口名，接口名&#123;&#125;</span><br><span class="line">    一般用法</span><br><span class="line">    public class 类名 extends 父类 implements 接口，接口&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="第八章-集合框架"><a href="#第八章-集合框架" class="headerlink" title="第八章 集合框架"></a>第八章 集合框架</h2><p>1.ArrayList<br>1.用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list=new ArrayList();</span><br><span class="line">list.add();//添加数据  </span><br><span class="line">list.get();//获取数据</span><br></pre></td></tr></table></figure><p>2.Map<br>用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map map=new HasMap();</span><br><span class="line">map.put(key,value);//key不能重复 </span><br><span class="line">map.get(key);//获取key对象的value</span><br></pre></td></tr></table></figure><p>3.泛型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list=new ArrayList&gt;&lt;String&gt;();</span><br><span class="line">Map&lt;String,String&gt; map=new HasMap&lt;String,String&gt;(); ArrayList&lt;Map&lt;String,String&gt;&gt; list=new ArrayList&gt;&lt;Map&lt;String,String&gt;();</span><br></pre></td></tr></table></figure><h2 id="第九章-高级功能-文件操作"><a href="#第九章-高级功能-文件操作" class="headerlink" title="第九章 高级功能-文件操作"></a>第九章 高级功能-文件操作</h2><p>1.文件概述<br>文件是有具体内容或用途的，而文件夹是用来放置这些文件的。文件在java中对应的类是File。File类是IO包中唯一代表磁盘文件本身的对象。通过File来创建，删除，重命名文件。<br>2.流在Java中指所读取到的信息，是通过一根管道，输送到数据文件中的。这跟管道中的信息，称之为“流”(Stream)。可以分为字节流和输出流。<br>3.使用FileWrite类写文件示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">Writer fw=null;    </span><br><span class="line">try &#123;           </span><br><span class="line">fw=new FileWriter(&quot;d:/sample.txt&quot;);  </span><br><span class="line">//写入信息          </span><br><span class="line">fw.write(&quot;我热爱JAVA编程！&quot;);</span><br><span class="line">fw.flush();//刷新缓冲区      </span><br><span class="line">&#125; catch (IOException e) &#123;   </span><br><span class="line">// TODO: handle exception </span><br><span class="line">e.printStackTrace();   </span><br><span class="line">&#125;if (fw!=null) &#123;  </span><br><span class="line">try &#123;           </span><br><span class="line">fw.close();     </span><br><span class="line">&#125; catch (IOException e) &#123; </span><br><span class="line">// TODO: handle exception   </span><br><span class="line">e.printStackTrace();    </span><br><span class="line">&#125;      </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十章-多线程"><a href="#第十章-多线程" class="headerlink" title="第十章 多线程"></a>第十章 多线程</h2><p>1.线程可以理解成是在程序中独立运行的子任务。<br>2.线程的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Text&#123;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">DownloanA downloadA = new DownloanA();</span><br><span class="line">            Thread myThread =new Thread(downloadA);</span><br><span class="line">            myThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DownloanA implements Runnable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            download();</span><br><span class="line">        &#125;</span><br><span class="line">        public void download()&#123;</span><br><span class="line">            System.out.println(&quot;进入mp3下载线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>3.多线程的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//线程1</span><br><span class="line">public class MyThread /*implements Runnable*/ extends Thread&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;开启了多线程1&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//线程2</span><br><span class="line">public class MyThread1 /*implements Runnable*/extends Thread&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;开启了多线程2&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">/*MyThread myThread=new MyThread();</span><br><span class="line">//myThread.run();</span><br><span class="line">new Thread(myThread).start();</span><br><span class="line"></span><br><span class="line">MyThread1 myThread1=new MyThread1();</span><br><span class="line">//myThread1.run();</span><br><span class="line">new Thread(myThread1).start();*/</span><br><span class="line"></span><br><span class="line">/*MyThread myThread=new MyThread();</span><br><span class="line">myThread.start();</span><br><span class="line">MyThread1 myThread1=new MyThread1();</span><br><span class="line">myThread1.start();*/</span><br><span class="line">//System.out.println(&quot;main:&quot;+Thread.currentThread().getName());</span><br><span class="line">Thread thread=new Thread(&quot;my线程&quot;)&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;新线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">//thread.run();</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/10/30/hello-world/"/>
    <url>2019/10/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>